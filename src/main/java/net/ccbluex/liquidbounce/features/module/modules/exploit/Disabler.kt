/*
 * SkidBounce Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge, Forked from LiquidBounce.
 * https://github.com/SkidBounce/SkidBounce/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.events.*
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.DisablerMode
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.grim.Grim2365FastBreak
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.grim.GrimPlace
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.kod3ra.StormMovement
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.other.*
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.verus.VerusBadPacketsI
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.verus.VerusBadPacketsM
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.verus.VerusReachB
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.vulcan.VulcanAutoBlock
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.vulcan.VulcanScaffold
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.vulcan.VulcanSprint
import net.ccbluex.liquidbounce.utils.ClassUtils.getValues
import net.ccbluex.liquidbounce.utils.extensions.plus
import net.ccbluex.liquidbounce.value.BooleanValue
import net.ccbluex.liquidbounce.value.Value

object Disabler : Module("Disabler", Category.EXPLOIT) {
    val debug by BooleanValue("Debug", false)
    private var settings: List<Value<*>> = super.values
    private val modes = arrayOf(
        VulcanScaffold,
        VulcanSprint,
        InvalidUsePosition,
        Transaction,
        NoKeepAlive,
        NoSwing,
        NoEntityAction,
        NoAbilities,
        NoDigging,
        NoFlying,
        VulcanAutoBlock,
        Grim2365FastBreak,
        Cursor,
        GrimPlace,
        StormMovement,
        VerusReachB,
        Riding,
        Spectate,
        VerusBadPacketsI,
        VerusBadPacketsM,
        NullUseItem,
        InvalidReleasePosition,
        InvalidReleaseDirection,
        Respawn,
    ).apply {
        sortedBy { it.modeName }
            .onEach { mode ->
                settings += object : BooleanValue(mode.modeName, false) {
                    override fun onChange(oldValue: Boolean, newValue: Boolean): Boolean {
                        if (state && newValue && !oldValue) mode.onEnable()
                        if (state && !newValue && oldValue) mode.onDisable()
                        return newValue
                    }
                }

                getValues(mode).onEach {
                    it.isSupported += { mode in activeModes }
                    it.name = "${mode.modeName}-${it.name}"
                    settings += it
                }
            }
    }

    override fun onEnable() {
        activeModes.onEach { it.onEnable() }
    }

    override fun onDisable() {
        activeModes.onEach { it.onDisable() }
    }

    @EventTarget(priority = 2)
    fun onPacket(event: PacketEvent) {
        activeModes.onEach { it.onPacket(event) }
    }

    @EventTarget
    fun onUpdate(event: UpdateEvent) {
        activeModes.onEach { it.onUpdate() }
    }

    @EventTarget
    fun onMove(event: MoveEvent) {
        activeModes.onEach { it.onMove(event) }
    }

    @EventTarget
    fun onMotion(event: MotionEvent) {
        activeModes.onEach { it.onMotion(event) }
    }

    @EventTarget
    fun onWorld(event: WorldEvent) {
        activeModes.onEach { it.onWorld(event) }
    }

    val activeModes: List<DisablerMode>
        get() = modes.filter { mode ->
            values.find { mode.modeName == it.name }!!.get() as Boolean
        }

    override val values: List<Value<*>>
        get() = settings
}
